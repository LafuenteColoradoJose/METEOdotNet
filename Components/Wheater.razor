@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Coordenates coordenates

@code {
    public double Latitude;
    public double Longitude;

    private WeatherData? weatherData;
    private DateTime time = DateTime.Now;
    private TimeZoneInfo timeZone = TimeZoneInfo.Local;
    private string weatherIconUrl = "icons/9027124_spinner_thin_icon.svg"; // Default icon

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await LoadWeatherData();
       
    }

    private async Task LoadWeatherData()
{
    try
    {
        // Validar las coordenadas antes de hacer la solicitud
        if (coordenates.Latitude < -90 || coordenates.Latitude > 90 || coordenates.Longitude < -180 || coordenates.Longitude > 180)
        {
            throw new ArgumentException("Las coordenadas de latitud y longitud no son válidas.");
        }

        // Reemplazar las comas por puntos en las coordenadas
        var latitude = coordenates.Latitude.ToString().Replace(',', '.');
        var longitude = coordenates.Longitude.ToString().Replace(',', '.');
    


        // Construir la URL
            var url = $"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current=temperature_2m,is_day,precipitation,rain,cloud_cover,wind_speed_10m,wind_direction_10m&forecast_days=1";

        // Realizar la solicitud HTTP
        weatherData = await Http.GetFromJsonAsync<WeatherData>(url);

        // Actualizar el estado del componente
        StateHasChanged();
    }
    catch (HttpRequestException ex)
    {
        // Manejo de errores HTTP
        Console.Error.WriteLine($"Error al realizar la solicitud HTTP: {ex.Message}");
    }
    catch (NotSupportedException ex)
    {
        // Error de deserialización
        Console.Error.WriteLine($"Error al procesar la respuesta de la API: {ex.Message}");
    }
    catch (ArgumentException ex)
    {
        // Coordenadas inválidas
        Console.Error.WriteLine($"Validación fallida: {ex.Message}");
    }
    catch (Exception ex)
    {
        // Otros errores
        Console.Error.WriteLine($"Ocurrió un error: {ex.Message}");
    }
}
private async Task<string> GetWeatherIconAsync()
{
        weatherIconUrl = await GetWeatherIconAsync();

    if (weatherData == null || weatherData.current == null)
    {
        return "icons/9027124_spinner_thin_icon.svg"; // Generic spinner icon
    }

    var temperature = weatherData.current.temperature_2m;
    var cloudCover = weatherData.current.cloud_cover;
    var precipitation = weatherData.current.precipitation;
    var windSpeed = weatherData.current.wind_speed_10m;
    var isDay = weatherData.current.is_day == 1;

    if (isDay && cloudCover < 10 && precipitation < 1)
    {
        return "icons/3741356_sun_sunny_weather_icon.svg";
    }
    else if (!isDay && cloudCover < 10 && precipitation < 1)
    {
        return "icons/3741364_clearly_night_night_star_weather_icon.svg";
    }
    else if (cloudCover > 10 && precipitation < 1)
    {
        return "icons/3741359_cloud_overcast_weather_icon.svg";
    }
    else
    {
        return "icons/3741348_heavy_rain_rain_weather_icon.svg"; // Default icon
    }
}


    public class WeatherData
    {
        public Current current { get; set; } = new Current();
    }

    public class Current
    {
        public double temperature_2m { get; set; }
        public double precipitation { get; set; }
        public double cloud_cover { get; set; }
        public double wind_speed_10m { get; set; }
        public double wind_direction_10m { get; set; }
        public int is_day { get; set; }
    }
}

<section id="cardWeater" class="mt-1 d-flex flex-wrap justify-content-center align-items-center gap-4">
    @* <h3>Weather Dashboard</h3> *@
@* 
    <p>latitude</p>
    <p>@coordenates.Latitude</p>
    <p>longitude</p>
    <p>@coordenates.Longitude</p> *@


    @if (weatherData == null)
    {
        <p>Loading...</p>
    }
    else
    {

        <article class="fs-3 text-center ">Current Location</article>
        <div class="small text-center">@time.ToString("dddd dd MMMM yyyy")</div>

        <article id="bloqCard" class="d-flex flex-wrap justify-content-center align-items-center rounded ">
             
            <div id="dateCard" class="d-flex flex-wrap justify-content-center align-items-center">
                <img src="@weatherIconUrl" alt="Weather Icon" />
                <div class="font-weight-medium display-1">@((weatherData.current.temperature_2m).ToString("0"))°</div>
            </div>
            

            <div class="d-flex flex-wrap justify-content-between align-items-center mt-6 gap-1 mx-2">
                <div class="d-flex flex-column align-items-center">
                    <div class="font-weight-medium">Wind</div>
                    <div class="small">@((weatherData.current.wind_speed_10m).ToString("0")) m/s</div>
                </div>
                <div class="d-flex flex-column align-items-center">
                    <div class="font-weight-medium small">Direction</div>
                    <div class="small">@((weatherData.current.wind_direction_10m).ToString("0"))°</div>
                </div>
                <div class="d-flex flex-column align-items-center">
                    <div class="font-weight-medium small">Precipitation</div>
                    <div class="small">@((weatherData.current.precipitation).ToString("0")) mm</div>
                </div>
                <div class="d-flex flex-column align-items-center">
                    <div class="font-weight-medium small">Cloud Cover</div>
                    <div class="small">@((weatherData.current.cloud_cover).ToString("0")) %</div>
                </div>
            </div>

        </article>
        

       
    }
</section>

<style>
    img {
        height: 6rem; 
        width: 6rem;
    }

    @@media (width > 576px) {
        img {
            height: 8rem;
            width: 8rem;
        }
    }

    #cardWeater {
        background: rgb(182,204,216);
        background: linear-gradient(70deg, rgba(182,204,216,1) 83%, rgba(59,60,61,1) 100%);
        border-radius: 4px;
        
    }
   
    @@media (width > 576px) {
        #cardWeater {
            /* width: fit-content; */
            height: auto;
            gap:6px;

        }
    }

   
    
</style>
                        