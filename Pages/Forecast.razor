@page "/forecast"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Coordenates coordenates

<PageTitle>Forecast</PageTitle>

<h1>Weather forecast</h1>

<canvas id="weatherChart" style="width: 100%; height: auto;" height="400"></canvas>

@code {
    public double Latitude;
    public double Longitude;

    private WeatherData? weatherData;
   

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await LoadWeatherData();
        await JSRuntime.InvokeVoidAsync("createWeatherChart", weatherData);
    }

    private async Task LoadWeatherData()
    {
        try
        {
            // Validar las coordenadas antes de hacer la solicitud
            if (coordenates.Latitude < -90 || coordenates.Latitude > 90 || coordenates.Longitude < -180 || coordenates.Longitude > 180)
            {
                throw new ArgumentException("Las coordenadas de latitud y longitud no son válidas.");
            }

            // Reemplazar las comas por puntos en las coordenadas
            var latitude = coordenates.Latitude.ToString().Replace(',', '.');
            var longitude = coordenates.Longitude.ToString().Replace(',', '.');

            // Construir la URL
            var url = $"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&hourly=temperature_2m,precipitation_probability,cloud_cover,wind_speed_10m&forecast_days=1";

            // Realizar la solicitud HTTP
            weatherData = await Http.GetFromJsonAsync<WeatherData>(url);

            // Actualizar el estado del componente
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Manejo de errores HTTP
            Console.Error.WriteLine($"Error al realizar la solicitud HTTP: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            // Error de deserialización
            Console.Error.WriteLine($"Error al procesar la respuesta de la API: {ex.Message}");
        }
        catch (ArgumentException ex)
        {
            // Coordenadas inválidas
            Console.Error.WriteLine($"Validación fallida: {ex.Message}");
        }
        catch (Exception ex)
        {
            // Otros errores
            Console.Error.WriteLine($"Ocurrió un error: {ex.Message}");
        }
    }

    public class WeatherData
    {
        public Hourly hourly { get; set; } = new Hourly();
    }

    public class Hourly
    {
        public List<string> time { get; set; } = new List<string>();
        public List<double> temperature_2m { get; set; } = new List<double>();
        public List<int> precipitation_probability { get; set; } = new List<int>();
        public List<int> cloud_cover { get; set; } = new List<int>();
        public List<double> wind_speed_10m { get; set; } = new List<double>();
    }
}

    <script>
        window.createWeatherChart = (weatherData) => {
            var ctx = document.getElementById('weatherChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: weatherData.hourly.time,
                    datasets: [
                        {
                            label: 'Temperature (°C)',
                            data: weatherData.hourly.temperature_2m,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            yAxisID: 'y-axis-1'
                        },
                        {
                            label: 'Precipitation Probability (%)',
                            data: weatherData.hourly.precipitation_probability,
                            borderColor: 'rgba(54, 162, 235, 1)',
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            yAxisID: 'y-axis-2'
                        },
                        {
                            label: 'Cloud Cover (%)',
                            data: weatherData.hourly.cloud_cover,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            yAxisID: 'y-axis-2'
                        },
                        {
                            label: 'Wind Speed (km/h)',
                            data: weatherData.hourly.wind_speed_10m,
                            borderColor: 'rgba(153, 102, 255, 1)',
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            yAxisID: 'y-axis-1'
                        }
                    ]
                },
                options: {
                    scales: {
                        yAxes: [
                            {
                                id: 'y-axis-1',
                                type: 'linear',
                                position: 'left'
                            },
                            {
                                id: 'y-axis-2',
                                type: 'linear',
                                position: 'right'
                            }
                        ]
                    }
                }
            });
        };
    </script>
    

